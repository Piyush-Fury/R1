name: Send Consolidated Reports

permissions:
  id-token: write
  contents: read
  actions: write

on:
  workflow_dispatch:
  schedule:
    - cron: '15 0 1 * *'  # Runs at 00:15 UTC on the 1st day of every month

jobs:
  send-reports:
    runs-on: ubuntu-latest
    environment: Download

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Set DATE variable
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GH_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: ${{ secrets.GH_OIDC_ROLE_SESSION_NAME }}


      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Activate Service Account
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud auth list
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"

      - name: Create clean workspace
        run: |
          rm -rf reports || true
          mkdir -p reports/aws
          mkdir -p reports/gcp

      - name: Download AWS report (Production)
        run: |
          BUCKET_NAME="the5ers-scout-suite-reports"
          PREFIX="aws/the5ers-production/"
          
          # Get the latest report
          AWS_REPORT_PATH=$(aws s3 ls s3://$BUCKET_NAME/$PREFIX --recursive | sort | tail -n 1 | awk '{print $4}')
          
          echo "Downloading AWS Production report: $AWS_REPORT_PATH"
          aws s3 cp "s3://$BUCKET_NAME/$AWS_REPORT_PATH" reports/aws/
      
          # Extract AWS report
          tar -xzf reports/aws/$(basename "$AWS_REPORT_PATH") -C reports/aws/
          rm reports/aws/$(basename "$AWS_REPORT_PATH")

      - name: Download AWS report (Staging)
        run: |
          BUCKET_NAME="the5ers-scout-suite-reports"
          PREFIX="aws/the5ers-staging/"
          
          # Get the latest report
          AWS_REPORT_PATH=$(aws s3 ls s3://$BUCKET_NAME/$PREFIX --recursive | sort | tail -n 1 | awk '{print $4}')
          
          echo "Downloading AWS Staging report: $AWS_REPORT_PATH"
          aws s3 cp "s3://$BUCKET_NAME/$AWS_REPORT_PATH" reports/aws/
      
          # Extract AWS report
          tar -xzf reports/aws/$(basename "$AWS_REPORT_PATH") -C reports/aws/
          rm reports/aws/$(basename "$AWS_REPORT_PATH")
      
      - name: Download AWS report (Root)
        run: |
          BUCKET_NAME="the5ers-scout-suite-reports"
          PREFIX="aws/the5ers-root/"
          
          # Get the latest report
          AWS_REPORT_PATH=$(aws s3 ls s3://$BUCKET_NAME/$PREFIX --recursive | sort | tail -n 1 | awk '{print $4}')
          
          echo "Downloading AWS Root report: $AWS_REPORT_PATH"
          aws s3 cp "s3://$BUCKET_NAME/$AWS_REPORT_PATH" reports/aws/
      
          # Extract AWS report
          tar -xzf reports/aws/$(basename "$AWS_REPORT_PATH") -C reports/aws/
          rm reports/aws/$(basename "$AWS_REPORT_PATH")
      
      - name: Download GCP report (Staging)
        run: |
          GCP_BUCKET="the5ers-scout-suite-report"
          GCP_PREFIX="gcp/ttp-staging/"
          
          # Get the latest report
          GCP_REPORT_PATH=$(gsutil ls gs://$GCP_BUCKET/$GCP_PREFIX* | sort | tail -n 1)
          
          echo "Downloading GCP Staging report: $GCP_REPORT_PATH"
          gsutil cp "$GCP_REPORT_PATH" reports/gcp/
      
          # Extract GCP report
          tar -xzf reports/gcp/$(basename "$GCP_REPORT_PATH") -C reports/gcp/
          rm reports/gcp/$(basename "$GCP_REPORT_PATH")
      
      - name: Download GCP report (Production)
        run: |
          GCP_BUCKET="the5ers-scout-suite-report"
          GCP_PREFIX="gcp/ttp-prod/"
          
          # Get the latest report
          GCP_REPORT_PATH=$(gsutil ls gs://$GCP_BUCKET/$GCP_PREFIX* | sort | tail -n 1)
          
          echo "Downloading GCP Production report: $GCP_REPORT_PATH"
          gsutil cp "$GCP_REPORT_PATH" reports/gcp/
      
          # Extract GCP report
          tar -xzf reports/gcp/$(basename "$GCP_REPORT_PATH") -C reports/gcp/
          rm reports/gcp/$(basename "$GCP_REPORT_PATH")
      # - name: Download AWS report
      #   run: |
      #     BUCKET_NAME="the5ers-scout-suite-reports"
      #     PREFIX="aws/the5ers-production/"
          
      #     # Get the latest report
      #     AWS_REPORT_PATH=$(aws s3 ls s3://$BUCKET_NAME/$PREFIX --recursive | sort | tail -n 1 | awk '{print $4}')
          
      #     echo "Downloading AWS report: $AWS_REPORT_PATH"
      #     aws s3 cp "s3://$BUCKET_NAME/$AWS_REPORT_PATH" reports/aws/

      #     # Extract AWS report
      #     tar -xzf reports/aws/$(basename "$AWS_REPORT_PATH") -C reports/aws/
      #     rm reports/aws/$(basename "$AWS_REPORT_PATH")

      # - name: Download GCP report
      #   run: |
      #     GCP_BUCKET="the5ers-scout-suite-report"
      #     GCP_PREFIX="gcp/ttp-staging/"
          
      #     # Get the latest report
      #     GCP_REPORT_PATH=$(gsutil ls gs://$GCP_BUCKET/$GCP_PREFIX* | sort | tail -n 1)
          
      #     echo "Downloading GCP report: $GCP_REPORT_PATH"
      #     gsutil cp "$GCP_REPORT_PATH" reports/gcp/

      #     # Extract GCP report
      #     tar -xzf reports/gcp/$(basename "$GCP_REPORT_PATH") -C reports/gcp/
      #     rm reports/gcp/$(basename "$GCP_REPORT_PATH")

      - name: Verify downloaded content
        run: |
          echo "AWS content:"
          ls -la reports/aws/
          echo "GCP content:"
          ls -la reports/gcp/

      - name: Create consolidated zip
        run: |
          zip -r scout-suite-reports-${{ env.DATE }}.zip reports/

      # - name: Upload to Slack
      #   uses: slackapi/slack-github-action@v2.0.0
      #   with:
      #     token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     channels: ${{ secrets.SLACK_CHANNEL_ID }}
      #     file: scout-suite-reports-${{ env.DATE }}.zip
      #     initial_comment: "Scout Suite consolidated reports for all environments are ready. ðŸ“¦"
          
      - name: Upload zipped reports to Slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: files.uploadV2
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
            initial_comment: "Scout Suite consolidated reports for all environments are ready. ðŸ“¦"
            file: "scout-suite-reports-${{ env.DATE }}.zip"
            filename: "scout-suite-reports-${{ env.DATE }}.zip"

      - name: Configure AWS Credentials to send mail from root account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GH_OIDC_ROLE_ROOT }}
          aws-region: ${{ secrets.AWS_REGION_ROOT }}
          role-session-name: github-actions-session


      - name: Send email with report via AWS SES
        run: |
          # Install required dependencies
          pip install boto3
          
          # Python script to send email with attachment
          python3 <<EOF
          import boto3
          from botocore.exceptions import ClientError
          
          # SES client
          ses = boto3.client('ses', region_name='${{ secrets.AWS_REGION_ROOT }}')
          
          # Email details
          sender = "iamops@the5ers.com"  # Verified SES email
          recipient = "https.piyush@gmail.com"  # Replace with recipient email
          subject = "Scout Suite Report - ${{ env.DATE }}"
          body_text = "Please find attached the Scout Suite report generated on ${{ env.DATE }}."
          body_html = f"""<html>
          <head></head>
          <body>
            <h1>Scout Suite Report</h1>
            <p>Please find attached the Scout Suite report generated on ${{ env.DATE }}.</p>
          </body>
          </html>
          """
          
          # Read the zip file
          with open("scout-suite-reports-${{ env.DATE }}.zip", "rb") as f:
              file_data = f.read()
          
          # Create message
          message = {
              'Subject': {'Data': subject},
              'Body': {
                  'Text': {'Data': body_text},
                  'Html': {'Data': body_html}
              }
          }
          
          # Create attachment
          attachment = {
              'Data': file_data,
              'FileName': "scout-suite-reports-${{ env.DATE }}.zip"
          }
          
          try:
              response = ses.send_raw_email(
                  Source=sender,
                  Destinations=[recipient],
                  RawMessage={
                      'Data': (
                          f"From: {sender}\n"
                          f"To: {recipient}\n"
                          f"Subject: {subject}\n"
                          f"MIME-Version: 1.0\n"
                          f"Content-Type: multipart/mixed; boundary=\"NextPart\"\n\n"
                          f"--NextPart\n"
                          f"Content-Type: text/plain\n\n"
                          f"{body_text}\n\n"
                          f"--NextPart\n"
                          f"Content-Type: text/html\n\n"
                          f"{body_html}\n\n"
                          f"--NextPart\n"
                          f"Content-Type: application/zip; name=\"scout-suite-reports-${{ env.DATE }}.zip\"\n"
                          f"Content-Disposition: attachment; filename=\"scout-suite-reports-${{ env.DATE }}.zip\"\n"
                          f"Content-Transfer-Encoding: base64\n\n"
                      ).encode() + file_data + b"\n--NextPart--"
                  }
              )
              print("Email sent! Message ID:", response['MessageId'])
          except ClientError as e:
              print("Error sending email:", e.response['Error']['Message'])
              raise
          EOF
